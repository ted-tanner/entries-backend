syntax = "proto2";

package entries.serverschema;

// Messages used only to compose other messages

enum ErrorType {
    // 400
    INCORRECTLY_FORMED = 0;
    INVALID_MESSAGE = 1;
    OUT_OF_DATE = 2;
    INVALID_STATE = 3;
    MISSING_HEADER = 4;
    CONFLICT_WITH_EXISTING = 5;

    // 401
    INCORRECT_CREDENTIAL = 6;
    TOKEN_EXPIRED = 7;
    TOKEN_MISSING = 8;
    WRONG_TOKEN_TYPE = 9;

    // 403
    USER_DISALLOWED = 10;
    PENDING_ACTION = 11;
    INCORRECT_NONCE = 12;
    TOO_MANY_ATTEMPTS = 13;
    READ_ONLY_ACCESS = 14;

    // 404
    USER_DOES_NOT_EXIST = 15;
    KEY_DOES_NOT_EXIST = 16;
    BUDGET_DOES_NOT_EXIST = 17;
    ENTRY_DOES_NOT_EXIST = 18;
    CATEGORY_DOES_NOT_EXIST = 19;
    INVITATION_DOES_NOT_EXIST = 20;
    FOREIGN_KEY_DOES_NOT_EXIST = 21;

    // 413
    INPUT_TOO_LARGE = 22;

    // 418
    TOO_MANY_REQUESTED = 23;

    // 500
    INTERNAL_ERROR = 24;

    // Anything that Actix Web returns before the handler is reached
    ACTIX_WEB_PREHANDLER = 25;
}

message Timestamp {
    required uint64 secs = 1;
    required uint32 nanos = 2;
}

message Uuid {
    required bytes value = 1;
}

message Category {
    required Uuid id = 1;
    required Uuid budget_id = 2;
    required bytes encrypted_blob = 3;
    required int64 version_nonce = 4;
    required Timestamp modified_timestamp = 5;
}

message Entry {
    required Uuid id = 1;
    required Uuid budget_id = 2;
    optional Uuid category_id = 3;
    required bytes encrypted_blob = 4;
    required int64 version_nonce = 5;
    required Timestamp modified_timestamp = 6;
}

// Server Inputs

message AuthStringAndEncryptedPasswordUpdate {
    required string user_email = 1;
    required string otp = 2;

    required bytes new_auth_string = 3;

    required bytes auth_string_hash_salt = 4;
    required int32 auth_string_hash_mem_cost_kib = 5;
    required int32 auth_string_hash_threads = 6;
    required int32 auth_string_hash_iterations = 7;

    required bytes password_encryption_key_salt = 8;
    required int32 password_encryption_key_mem_cost_kib = 9;
    required int32 password_encryption_key_threads = 10;
    required int32 password_encryption_key_iterations = 11;

    required bytes encrypted_encryption_key = 12;
}

message BackupCode {
    required string value = 1;
}

message BudgetAccessTokenList {
    repeated string tokens = 1;
}

message CategoryId {
    required Uuid value = 1;
}

message CategoryUpdate {
    required Uuid category_id = 1;
    required bytes encrypted_blob = 2;
    required int64 version_nonce = 3;
    required int64 expected_previous_version_nonce = 4;
}

message CategoryWithTempId {
    required int32 temp_id = 1;
    required bytes encrypted_blob = 2;
    required int64 version_nonce = 3;
}

message CredentialPair {
    required string email = 1;
    required bytes auth_string = 2;
    required int32 nonce = 3;
}

message EncryptedBlobAndCategoryId {
    required bytes encrypted_blob = 1;
    required int64 version_nonce = 2;
    optional Uuid category_id = 3;
}

message EncryptedBlobUpdate {
    required bytes encrypted_blob = 1;
    required int64 version_nonce = 2;
    required int64 expected_previous_version_nonce = 3;
}

message EntryAndCategory {
    required bytes entry_encrypted_blob = 1;
    required int64 entry_version_nonce = 2;
    required bytes category_encrypted_blob = 3;
    required int64 category_version_nonce = 4;
}

message EntryId {
    required Uuid value = 1;
}

message EntryUpdate {
    required Uuid entry_id = 1;
    required bytes encrypted_blob = 2;
    required int64 version_nonce = 3;
    required int64 expected_previous_version_nonce = 4;
    optional Uuid category_id = 5;
}

message NewBudget {
    required bytes encrypted_blob = 1;
    required int64 version_nonce = 2;
    repeated CategoryWithTempId categories = 3;
    required bytes user_public_budget_key = 4;
}

message NewEncryptedBlob {
    required bytes value = 1;
    required int64 version_nonce = 2;
}

message NewUser {
    required string email = 1;

    required bytes auth_string = 2;

    required bytes auth_string_hash_salt = 3;
    required int32 auth_string_hash_mem_cost_kib = 4;
    required int32 auth_string_hash_threads = 5;
    required int32 auth_string_hash_iterations = 6;

    required bytes password_encryption_key_salt = 7;
    required int32 password_encryption_key_mem_cost_kib = 8;
    required int32 password_encryption_key_threads = 9;
    required int32 password_encryption_key_iterations = 10;

    required bytes recovery_key_hash_salt = 11;
    required int32 recovery_key_hash_mem_cost_kib = 12;
    required int32 recovery_key_hash_threads = 13;
    required int32 recovery_key_hash_iterations = 14;

    required bytes encryption_key_encrypted_with_password = 15;
    required bytes encryption_key_encrypted_with_recovery_key = 16;

	required Uuid public_key_id = 17;
    required bytes public_key = 18;

    required bytes preferences_encrypted = 19;
    required int64 preferences_version_nonce = 20;
    required bytes user_keystore_encrypted = 21;
    required int64 user_keystore_version_nonce = 22;
}

message NewUserPublicKey {
	required Uuid id = 1;
	required bytes value = 2;
	required Uuid expected_previous_public_key_id = 3;
}

message Otp {
    required string value = 1;
}

message PublicKey {
    required bytes value = 1;
}

message RecoveryKeyUpdate {
    required string otp = 1;

    required bytes recovery_key_hash_salt = 2;
    required int32 recovery_key_hash_mem_cost_kib = 3;
    required int32 recovery_key_hash_threads = 4;
    required int32 recovery_key_hash_iterations = 5;

    required bytes encrypted_encryption_key = 6;
}

message UserInvitationToBudget {
    required string recipient_user_email = 1;
	required Uuid recipient_public_key_id_used_by_sender = 2;
	required Uuid recipient_public_key_id_used_by_server = 3;
    required bytes sender_public_key = 4;

    required bytes encryption_key_encrypted = 5;

    required bytes budget_info_encrypted = 6;
    required bytes sender_info_encrypted = 7;
    required bytes share_info_symmetric_key_encrypted = 8;

    required Timestamp expiration = 9;
    required bool read_only = 10;
}

// Server outputs

message AcceptKeyInfo {
    required bool read_only = 1;
    required uint64 expiration = 2;
}

message BackupCodesAndVerificationEmailSent {
    required bool email_sent = 1;
    required uint64 email_token_lifetime_hours = 2;
    repeated string backup_codes = 3;
}

message BackupCodeList {
    repeated string backup_codes = 1;
}

message Budget {
    required Uuid id = 1;
    required bytes encrypted_blob = 2;
    required int64 version_nonce = 3;
    required Timestamp modified_timestamp = 4;
    repeated Category categories = 5;
    repeated Entry entries = 6;
}

message BudgetFrame {
    required Uuid access_key_id = 1;
    required Uuid id = 2;
    repeated BudgetFrameCategory category_ids = 3;
    required Timestamp modified_timestamp = 4;    
}

message BudgetFrameCategory {
    required int32 temp_id = 1;
    required Uuid real_id = 2;
}

message BudgetIdAndEncryptionKey {
    required Uuid budget_id = 1;
    required Uuid budget_access_key_id = 2;
    required bytes encryption_key_encrypted = 3;
    required bool read_only = 4;
}

message BudgetList {
    repeated Budget budgets = 1;
}

message BudgetShareInvite {
    required Uuid id = 1;

    required bytes budget_accept_key_encrypted = 2;
    required bytes budget_accept_key_id_encrypted = 3;
    required bytes budget_info_encrypted = 4;
    required bytes sender_info_encrypted = 5;
    required bytes budget_accept_key_info_encrypted = 6;

    required bytes share_info_symmetric_key_encrypted = 7;

	required Uuid recipient_public_key_id_used_by_sender = 8;
	required Uuid recipient_public_key_id_used_by_server = 9;
}

message BudgetShareInviteList {
    repeated BudgetShareInvite invites = 1;
}

message EntryIdAndCategoryId {
    required Uuid entry_id = 1;
    required Uuid category_id = 2;
}

message InvitationId {
    required Uuid value = 1;
}

message IsUserListedForDeletion {
    required bool value = 1;
}

message ServerErrorResponse {
    required ErrorType err_type = 1 [default = ACTIX_WEB_PREHANDLER];
    required string err_message = 2;
}

message SigninNonceAndHashParams {
    required bytes auth_string_hash_salt = 1;
    required int32 auth_string_hash_mem_cost_kib = 2;
    required int32 auth_string_hash_threads = 3;
    required int32 auth_string_hash_iterations = 4;

    required int32 nonce = 5;
}

message SigninToken {
    required string value = 1;
}

message TokenPair {
    required string access_token = 1;
    required string refresh_token = 2;
    required Timestamp server_time = 3;
}

message UserPublicKey {
	required Uuid id = 1;
	required bytes value = 2;
}

message VerificationEmailSent {
    required bool email_sent = 1;
    required uint64 email_token_lifetime_hours = 2;
}
